name: terraform

on:
  push:
    branches: [ main ]
    paths:
    - sandbox/vpc/*

  pull_request:
    branches: [ main ]
    paths:
    - sandbox/vpc/*


env:
  
  AWS_REGION : "eu-west-2" # Lodnon


permissions:
      id-token: write
      contents: read
      pull-requests: 'write'

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: sandbox/vpc

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
  
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::445567079474:role/github-terraform
          role-session-name: github_terraform_plan
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0
      
      - name: Terraform init
        id: init
        run: terraform init
  
      - name: Terraform format
        id: fmt
        run: terraform fmt --recursive -check
      
      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
            <details><summary>Show Plan</summary>
  
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
  
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false


