# Action's name
name: terraform

# Set conditions for action to run
on:
  push:
    branches: [ main ]
    paths:
    - sandbox/vpc/*

  pull_request:
    branches: [ main ]
    paths:
    - sandbox/vpc/*

env:
  AWS_REGION : "eu-west-2"   # Default AWS region to use

permissions:
      id-token: write        # This is required for requesting the JWT
      contents: read         # This is required for actions/checkout
      pull-requests: write   # This is required for PR comments

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: sandbox/vpc

    steps:
      - name: git clone the repository
        uses: actions/checkout@v3
  
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::445567079474:role/github-terraform
          role-session-name: "github_terraform_$GITHUB_RUN_ID"
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0
      
      # Installs Terraform providers + modules
      - name: Terraform init
        id: init
        run: terraform init --upgrade
      
      # Checks that code is formatted correctly
      - name: Terraform format
        if: github.event_name == 'pull_request'
        id: fmt
        run: terraform fmt --recursive -check
      
      # Runs a plan
      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      # Comments plan's output on PR
      - name: Terraform plan comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format Check üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
  
            <details><summary>Show Plan</summary>
  
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\``;
  
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      # If plan fails = status check failes
      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Applies Terraform on push to main
      - name: Terraform apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
